buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.ow2.asm:asm-all:5.2" // Used to check for guava compat
    }
}

import groovy.transform.CompileStatic
import groovy.transform.Immutable
import org.objectweb.asm.*

import java.util.zip.ZipEntry
import java.util.zip.ZipFile

import static org.objectweb.asm.Opcodes.*

@CompileStatic
class ClassMembers {
    String className
    Set<Tuple2<String, String>> methods = new HashSet<>()
    Set<String> fields = new HashSet<>()
}

@CompileStatic
@Immutable
class JarMembers {
    private Map<String, ClassMembers> classes

    boolean isKnownClass(String className) {
        this.classes[className] != null
    }

    boolean isKnownMethod(String owner, String name, String desc) {
        ClassMembers classMembers = this.classes[owner]
        if (classMembers == null) return null
        return new Tuple2(name, desc) in classMembers.methods
    }

    boolean isKnownField(String owner, String name) {
        ClassMembers classMembers = this.classes[owner]
        if (classMembers == null) return null
        return name in classMembers.fields
    }

    static JarMembers parse(File jarFile) {
        def zip = new ZipFile(jarFile)
        Map<String, ClassMembers> classes = [:]
        try {
            zip.entries().each { ZipEntry entry ->
                def reader = new ClassReader(zip.getInputStream(entry).bytes)
                reader.accept(new ClassVisitor(ASM5) {
                    private ClassMembers classMembers = null
                    @Override
                    void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
                        this.classMembers = new ClassMembers(className: name)
                    }

                    @Override
                    MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
                        this.classMembers.methods.add(new Tuple2(name, desc))
                        return null
                    }

                    @Override
                    FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
                        this.classMembers.fields.add(name)
                        return null
                    }

                    @Override
                    void visitEnd() {
                        classes[this.classMembers.className] = this.classMembers
                    }
                }, ClassReader.SKIP_DEBUG | ClassReader.SKIP_CODE | ClassReader.SKIP_FRAMES)
            }
            return new JarMembers(classes: classes)
        } finally {
            zip.close()
        }
    }
}

Logger logger = logger
@CompileStatic
class GuavaCompatEnforcementTask extends DefaultTask {
    static File localRepo = new File(System.getProperty("user.home"), ".m2/repository")
    @Input
    String minimumVersion
    @InputFiles
    @SkipWhenEmpty
    FileCollection classFiles

    File findOrDownloadGuava(String version) {
        File localJar = new File(localRepo, "com/google/guava/guava/$version/guava-${version}.jar" as String)
        if (!localJar.exists()) {
            logger.info("Downloading guava $version from central repository!")
            localJar.parentFile.mkdirs()
            new URL("https://repo1.maven.org/maven2/com/google/guava/guava/$version/guava-${version}.jar").withInputStream { input ->
                localJar << input
            }
        }
        return localJar
    }

    @TaskAction
    void checkCompat() {
        logger.info("Examining guava $minimumVersion")
        JarMembers guavaMembers = JarMembers.parse(findOrDownloadGuava(minimumVersion))
        logger.info("Checking compliance with guava $minimumVersion")
        for (File classFile in classFiles) {
            classFile.withInputStream {
                def reader = new ClassReader(it)
                String className = reader.className
                char[] buffer = new char[reader.maxStringLength]
                // NOTE: We don't need to actually read the code, just the constant pool ;)
                for (int constantPoolIndex = 0; constantPoolIndex < reader.itemCount; constantPoolIndex++) {
                    int offset = reader.getItem(constantPoolIndex)
                    int itemType = reader.b[offset-  1] // See wikipedia for details
                    switch (itemType) {
                        case 7: // class reference
                            String name = reader.readClass(offset, buffer)
                            if (name.startsWith("com/google/common") && !guavaMembers.isKnownClass(name)) {
                                throw new GradleException("$className uses guava class not found in version $minimumVersion: ${name.replace('/', '.')}")
                            }
                            break
                        case 9: // field reference
                        case 10: // method reference
                        case 11: // interface method reference
                        case 15: // MethodHandle
                            Handle handle = reader.readConst(offset, buffer) as Handle
                            if (handle.owner.startsWith("com/google/common")) {
                                switch (handle.tag) {
                                    case H_INVOKEVIRTUAL:
                                    case H_INVOKESTATIC:
                                    case H_INVOKESPECIAL:
                                    case H_NEWINVOKESPECIAL:
                                    case H_INVOKEINTERFACE:
                                        if (!guavaMembers.isKnownMethod(handle.owner, handle.name, handle.desc)) {
                                            def methodType = Type.getMethodType(handle.desc)
                                            def methodId = new StringBuilder(handle.owner.length() + handle.desc.length() + handle.name.length() + 50)
                                            methodId.append(handle.owner.replace('/', '.'))
                                            methodId.append('.')
                                            methodId.append(handle.name)
                                            methodId.append('(')
                                            def argTypes = methodType.argumentTypes
                                            if (argTypes.length > 0) {
                                                methodId.append(argTypes[0].className)
                                                for (int i = 1; i < argTypes.length; i++) {
                                                    methodId.append(',')
                                                    methodId.append(argTypes[i].className)
                                                }
                                            }
                                            methodId.append(')')
                                            throw new GradleException(
                                                    "$className uses guava method not found in $minimumVersion: $methodId"
                                            )
                                        }
                                        break
                                    case H_GETFIELD:
                                    case H_GETSTATIC:
                                    case H_PUTFIELD:
                                    case H_PUTSTATIC:
                                        if (!guavaMembers.isKnownField(handle.owner, handle.name)) {
                                            throw new GradleException(
                                                    "$className uses guava field not found in $minimumVersion: ${handle.owner.replace('/', '.')}.${handle.name}"
                                            )
                                        }
                                }
                            }
                            break
                        case 3..6:
                        case [1, 8, 12, 16, 18]:
                            break // Ignored
                        default:
                            throw new AssertionError("Unknown constant pool type id: $itemType")
                    }
                }
            }
        }
    }
}
ext.GuavaCompatEnforcementTask = GuavaCompatEnforcementTask
